{"version":3,"sources":["redux/actions.js","redux/operations.js","redux/reducers.js","redux/store.js","Components/ContactForm/ContactForm.js","Components/ContactItem/ContactItem.js","redux/selectors.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","actions","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","axios","defaults","baseURL","operations","addContact","name","number","dispatch","contact","post","then","data","catch","error","deleteContact","id","delete","fetchContacts","get","itemsReducer","createReducer","_","payload","state","filter","item","filterReducer","loadingReducer","reducer","combineReducers","items","loader","middleware","getDefaultMiddleware","logger","store","configureStore","devTools","process","ContactForm","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","pattern","title","required","onChange","Component","connect","getState","some","alert","onDelete","contacts","map","onClick","getContacts","getFilter","selectors","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","getloading","ContactList","onInput","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1269c48e.chunk.js","sourcesContent":["// import { v4 as uuidv4 } from \"uuid\"\r\nimport { createAction } from \"@reduxjs/toolkit\"\r\n\r\n// const addContact = createAction(\"contacts/add\", (name, number) => ({\r\n//   payload: {\r\n//     // id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// }))\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\")\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\")\r\nconst fetchContactsError = createAction(\"contacts/fetchContactsError\")\r\n\r\nconst addContactRequest = createAction(\"contacts/addContactRequest\")\r\nconst addContactSuccess = createAction(\"contacts/addContactSuccess\")\r\nconst addContactError = createAction(\"contacts/addContactError\")\r\n\r\nconst deleteContactRequest = createAction(\"contacts/deleteContactRequest\")\r\nconst deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\")\r\nconst deleteContactError = createAction(\"contacts/deleteContactError\")\r\n\r\n// const deleteContact = createAction(\"contacts/delete\")\r\nconst filterContacts = createAction(\"contacts/filter\")\r\nconst actions = {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterContacts,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n}\r\nexport default actions\r\n","import axios from \"axios\"\r\nimport actions from \"../redux/actions\"\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\"\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(actions.fetchContactsRequest())\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(actions.fetchContactsError(error)))\r\n}\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  }\r\n  dispatch(actions.addContactRequest())\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.addContactError(error)))\r\n}\r\n\r\nconst deleteContact = (id) => (dispatch) => {\r\n  dispatch(actions.deleteContactRequest())\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\r\n    .catch((error) => dispatch(actions.deleteContactError(error)))\r\n}\r\n\r\nconst operations = { addContact, deleteContact, fetchContacts }\r\nexport default operations\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\"\r\nimport actions from \"./actions\"\r\nconst {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  filterContacts,\r\n} = actions\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter((item) => item.id !== payload),\r\n})\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n})\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n})\r\nconst error = createReducer(null, {})\r\nconst reducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  error,\r\n  loader: loadingReducer,\r\n})\r\n\r\nexport default reducer\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\"\r\nimport logger from \"redux-logger\"\r\nimport reducer from \"./reducers\"\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware(),\r\n  // {\r\n  // serializableCheck: {\r\n  //   ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  // },\r\n  // }\r\n  logger,\r\n]\r\n\r\nconst store = configureStore({\r\n  reducer: reducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n})\r\n\r\nexport default store\r\n\r\n// import { combineReducers } from \"redux\"\r\n// import {\r\n//   persistStore,\r\n//   persistReducer,\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from \"redux-persist\"\r\n// import storage from \"redux-persist/lib/storage\"\r\n\r\n// const persistConfig = {\r\n//   key: \"contacts\",\r\n//   storage,\r\n//   blacklist: \"filter\",\r\n// }\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/addContactSuccess\":\r\n//       return [...state, payload]\r\n//     case \"contacts/deleteContactSuccess\":\r\n//       return state.filter((item) => item.id !== payload)\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// const filterReducer = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/filter\":\r\n//       return payload\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// const reducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// })\r\n\r\n// const persistedReducer = persistReducer(persistConfig, reducer)\r\n\r\n// const persistor = persistStore(store)\r\n\r\n// const exportobject = { store, persistor }\r\n","import PropTypes from \"prop-types\"\nimport { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport operations from \"../../redux/operations\"\nimport store from \"../../redux/store\"\nimport \"./ContactForm.css\"\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n\n    const name = e.target[0].value\n    const number = e.target[1].value\n\n    this.props.onSubmit(name, number)\n\n    e.target[0].value = \"\"\n    e.target[1].value = \"\"\n  }\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"name-label\">\n          Name{\" \"}\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <label className=\"number-label\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    )\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (name, number) => {\n    const state = store.getState()\n    state.items.some((item) => item.name === name)\n      ? alert(\"ups, this name is on the list already\")\n      : dispatch(operations.addContact(name, number))\n  },\n})\n\nexport default connect(null, mapDispatchToProps)(ContactForm)\n","import PropTypes from \"prop-types\"\nimport \"./ContactItem.css\"\nimport { connect } from \"react-redux\"\nimport operations from \"../../redux/operations\"\n\nconst ContactItem = ({ contacts, onDelete }) =>\n  contacts.map((contact) => (\n    <li key={contact.id} className=\"contactItem\">\n      <p>\n        {contact.name}: {contact.number}\n      </p>\n      <button\n        type=\"button\"\n        onClick={() => onDelete(contact.id)}\n        className=\"delete-contact-btn\"\n      >\n        Delete\n      </button>\n    </li>\n  ))\n\nContactItem.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDelete: (id) => dispatch(operations.deleteContact(id)),\n})\n\nexport default connect(null, mapDispatchToProps)(ContactItem)\n","import { createSelector } from \"@reduxjs/toolkit\"\r\n\r\nconst getContacts = (state) => state.items\r\nconst getFilter = (state) => state.filter\r\nconst getloading = (state) => state.loader\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase()\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    )\r\n  }\r\n)\r\nconst selectors = { getContacts, getFilter, getFilteredContacts, getloading }\r\nexport default selectors\r\n","import PropTypes from \"prop-types\"\nimport ContactItem from \"../ContactItem\"\nimport { connect } from \"react-redux\"\nimport operations from \"../../redux/operations\"\nimport { Component } from \"react\"\nimport selectors from \"../../redux/selectors\"\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.fetchContacts()\n  }\n  render() {\n    return (\n      <>\n        {this.props.loader && <h1>Loading...</h1>}\n        {!this.props.loader && (\n          <ul>\n            <ContactItem contacts={this.props.contacts} />\n          </ul>\n        )}\n      </>\n    )\n  }\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    contacts: selectors.getFilteredContacts(state),\n    loader: selectors.getloading(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(operations.fetchContacts()),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)\n","import { connect } from \"react-redux\"\nimport actions from \"../../redux/actions\"\nimport PropTypes from \"prop-types\"\n\nconst Filter = ({ onInput }) => (\n  <>\n    <h2>Find contacts by name</h2>\n    <input\n      type=\"text\"\n      name=\"filter\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      onChange={onInput}\n    />\n  </>\n)\n\nFilter.propTypes = {\n  onInput: PropTypes.func.isRequired,\n}\n// const mapStateToProps = (state) => ({\n//   value: state.filter,\n// })\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onInput: (e) => dispatch(actions.filterContacts(e.target.value)),\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Filter)\n","import \"./App.css\"\nimport ContactForm from \"./Components/ContactForm/\"\nimport ContactList from \"./Components/ContactList\"\nimport Filter from \"./Components/Filter\"\n\nconst App = ({ loader }) => (\n  <>\n    <h1> Phonebook </h1>\n    <ContactForm />\n    <h2> Contacts </h2>\n    <Filter />\n\n    <ContactList />\n  </>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { Provider } from \"react-redux\"\nimport store from \"../src/redux/store\"\n// import { PersistGate } from \"redux-persist/integration/react\"\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}